#!/usr/bin/env python3
# Copyright (C) 2017 SUSE LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import re
import sys
import json
import shlex
import random
import shutil
import string
import hashlib
import logging
import argparse
import tempfile
import subprocess

class attrdict(object):
	"Dumb implementation of attrdict."
	def __init__(self, *args, **kwargs):
		self.__dict__ = dict(*args, **kwargs)


class SubprocessError(Exception):
	pass

class DockerfileFormatError(Exception):
	pass


def os_path_join(*parts):
	"""
	os_path_join is a sane implementation of os_path_join when it comes to
	concatenating absolute paths. We also make all of the joining safe.
	"""
	if len(parts) == 0:
		parts = ["."]
	isabs = os.path.isabs(parts[0])

	parts = [os_path_clean(part) for part in parts]
	for idx, part in enumerate(parts):
		if part.startswith("/"):
			part = part.lstrip("/")
		parts[idx] = part

	if isabs:
		parts = ["/"] + parts
	return os.path.join(*parts)

def os_path_clean(orig_path):
	"""
	os_path_clean is a reimplementation of Go's path/filepath.Clean. This logic
	originally comes from Plan 9, and it returns a lexically identical path to
	the provided path (note that it might not agree with what you would get if
	you actually evaluted the filesystem).

	  >>> os_path_clean("abc")
	  'abc'
	  >>> os_path_clean("abc/.//def/")
	  'abc/def'
	  >>> os_path_clean("/./../abc/def")
	  '/abc/def'
	  >>> os_path_clean("abc/def/../ghi/../jkl")
	  'abc/jkl'
	  >>> os_path_clean("abc/def/../..")
	  '.'
	  >>> os_path_clean("abc/def/../../../ghi/jkl/../../../mno")
	  '../../mno'
	  >>> os_path_clean("/../abc")
	  '/abc'
	  >>> os_path_clean("abc//./../def")
	  'def'
	  >>> os_path_clean("abc/../../././../def")
	  '../../def'
	"""

	prev = None
	path = orig_path

	# We apply the same algorithm iteratively until it stops changing the input.
	while prev != path:
		parts = path.split(os.path.sep)

		# 1. Replace multiple Separator elements with a single one.
		parts = [part for part in parts if part != ""]

		# 2. Eliminate each . path name element (the current directory).
		parts = [part for part in parts if part != "."]

		# 3. Eliminate each inner .. path name element (the parent directory)
		#    along with the non-.. element that precedes it.
		new_parts = []
		for part in parts:
			if part != ".." or len(new_parts) == 0 or new_parts[-1] == "..":
				new_parts.append(part)
				continue
			new_parts = new_parts[:-1]
		parts = new_parts

		# 4. Eliminate .. elements that begin a rooted path;
		#    that is, replace "/.." by "/" at the beginning of a path,
		#    assuming Separator is '/'.
		if os.path.isabs(orig_path):
			while len(parts) > 0 and parts[0] == "..":
				parts = parts[1:]

		prev = path
		path = "."
		if parts:
			path = os.path.join(*parts)

	# The "multiple separator" code above silently converts absolute paths to
	# be relative to the root. So we have to fix that here.
	if os.path.isabs(orig_path):
		path = os.path.sep + path
	if path == "/.":
		path = "/"

	return path

def os_system(*args):
	"""
	Execute a command in the foreground, waiting until the command exits.
	Standard I/O is inherited from this process.
	"""
	debug("Executing %s." % (args,))
	print("  ---> [%s]" % (args[0],))
	ret = subprocess.call(args, stdin=subprocess.DEVNULL)
	print("  <--- [%s]" % (args[0],))
	if ret != 0:
		raise SubprocessError("%s failed with error code %d" % (" ".join(args), ret))

# Wrappers/aliases for logging functions.
debug = logging.debug
info = logging.info
warn = logging.warn

def fatal(*args):
	logging.fatal(*args)
	sys.exit(1)

def generate_id(size=32, chars=string.ascii_uppercase + string.ascii_lowercase + string.digits):
	return ''.join(random.choice(chars) for _ in range(size))

def hash_digest(algo, contents):
	h = hashlib.new(algo)
	h.update(contents.encode("utf-8"))
	return h.hexdigest()


class DockerfileParser(object):
	"""
	DockerfileParser returns the parsed output
	"""

	def __init__(self, data):
		self.data = data

	def parse(self):
		# First clean up the comments and line continuations and then split up
		# the arguments and commands. While this isn't as "full featured" as
		# Docker's quite complicated Dockerfile parsing code, it should work
		# fine in most cases.
		self.data = re.sub(r"^#.*$", r"", self.data, flags=re.MULTILINE)
		self.data = re.sub(r"\\\n", r" ", self.data, flags=re.MULTILINE)

		# Split up the arguments and commands.
		steps = []
		for line in self.data.split('\n'):
			if not line.strip():
				continue

			cmd, rest = line.split(" ", maxsplit=1)
			if "$" in rest:
				warn("Orca currently doesn't implement shell substitution.")

			# Try to parse it as JSON and fall back to regular splitting.
			# NOTE: This doesn't handle the fact that some commands don't
			#       accept JSON arguments. We can handle that later though.
			#       Also I'm not sure how we should handle --style arguments to
			#       commands.
			args = None
			try:
				args = json.loads(rest.strip())
			except json.decoder.JSONDecodeError:
				pass

			# Commands only accept JSON lists.
			isjson = isinstance(args, list)
			if not isjson:
				args = shlex.split(rest)

			steps.append(attrdict({
				"cmd": cmd,
				"args": args,
				"isjson": isjson,
			}))

		# Make sure there's at least one step.
		if len(steps) == 0:
			raise DockerfileFormatError("Dockerfile contained no instructions.")

		# The first step must be FROM.
		if steps[0].cmd.lower() != "from":
			raise DockerfileFormatError("Dockerfiles must start with FROM.")

		# Return the steps.
		return steps


class Builder(object):
	"""
	Builder represents a builder instance.
	"""

	def safepath(self, path):
		"Returns a safe version of the given path."
		path = os_path_clean(path)
		path = os_path_join(self.root, path)
		path = os_path_clean(path)
		return path

	def __init__(self, root, build_args=None, script="Dockerfile"):
		self.root = root

		# Internal tags and image information.
		self.image_path = None
		self.our_tags = []
		self.source_tag = None
		self.destination_tag = None

		# Instruction metadata.
		self.default_shell = ["/bin/sh", "-c"]
		self.build_args = build_args
		if self.build_args is None:
			self.build_args = {}

		# The actual script.
		with open(self.safepath(script)) as f:
			contents = f.read()
			self.script = DockerfileParser(contents).parse()
			self.script_hash = hash_digest("sha256", contents) + "-dest"

		# Tool paths.
		# TODO: Make these configurable and absolute paths.
		self.skopeo = "skopeo"
		self.umoci = "umoci"
		self.runc = "runc"

	def umoci_config(self, *args):
		# Update the configuration.
		oci_source = "%s:%s" % (self.image_path, self.source_tag)
		oci_dest = self.destination_tag
		os_system(self.umoci, "config", "--image="+oci_source, "--tag="+oci_dest, *args)

		# The destination has become the ma^H^Hsource.
		self.source_tag = self.destination_tag

	def _generate_destination(self):
		self.destination_tag = hash_digest("sha256", self.script_hash + str(self.destination_tag) + "-next") + "-dest"
		self.our_tags.append(self.destination_tag)

	def _dispatch_from(self, *args, isjson=False):
		if len(args) != 1:
			raise DockerfileFormatError("FROM can only have one argument.")
		if isjson:
			raise DockerfileFormatError("FROM doesn't support JSON arguments.")
		docker_source = "docker://%s" % (args[0],)

		if self.image_path is None:
			self.image_path = tempfile.mkdtemp(prefix="orca-build.")
			info("Created new image for build: %s" % (self.image_path,))

		if self.source_tag is None:
			self.source_tag = hash_digest("sha256", docker_source) + "-src"
			self.our_tags.append(self.source_tag)
		else:
			raise RuntimeError("source_tag is not None in FROM: %s" % (self.source_tag,))

		if docker_source != "docker://scratch":
			# TODO: At the moment we only really support importing from a Docker
			#       registry. We need to extend the Dockerfile syntax to enable
			#       sourcing OCI images from the local filesystem.
			oci_destination = "oci:%s:%s" % (self.image_path, self.source_tag)
			os_system(self.skopeo, "copy", docker_source, oci_destination)
		else:
			os.rmdir(self.image_path)
			os_system(self.umoci, "init", "--layout="+self.image_path)
			os_system(self.umoci, "new", "--image=%s:%s" % (self.image_path, self.source_tag))

	def _dispatch_run(self, *args, isjson=False):
		bundle_path = tempfile.mkdtemp(prefix="orca-bundle.")
		debug("Created new bundle for build: %s" % (bundle_path,))

		oci_source = "%s:%s" % (self.image_path, self.source_tag)
		oci_destination = "%s:%s" % (self.image_path, self.destination_tag)
		# TODO: Add --rootless support.
		os_system(self.umoci, "unpack", "--image="+oci_source, bundle_path)

		# Modify the config.json.
		config_path = os_path_join(bundle_path, "config.json")
		with open(config_path) as f:
			config = json.load(f)

		if not isjson:
			args = self.default_shell + [" ".join(args)]
		config["process"]["args"] = args
		config["process"]["terminal"] = False # XXX: Currently terminal=true breaks because stdin is /dev/null.
		config["root"]["readonly"] = False
		# ARG doesn't persist in the image, so we have to set it here.
		for name, value in self.build_args.items():
			# ENV always overrides ARG.
			if any(env.startswith(name + "=") for env in config["process"]["env"]):
				debug("arg %s=%s overridden by already-set environment variable" % (name, value))
				continue
			config["process"]["env"].append("%s=%s" % (name, value))

		with open(config_path, "w") as f:
			json.dump(config, f)

		# Run the container.
		ctr_id = "orca-build-" + generate_id()
		os_system(self.runc, "run", "--bundle="+bundle_path, ctr_id)

		# Repack the image.
		os_system(self.umoci, "repack", "--image="+oci_destination, bundle_path)

		# TODO: Delete the bundle.

		# The destination has become the ma^H^Hsource.
		self.source_tag = self.destination_tag

	def _dispatch_entrypoint(self, *args, isjson=False):
		# The interactions with CMD and ENTRYPOINT are quite complicated
		# because of backwards compatibility. Unfortuately that means that it's
		# quite hard to emulate certain cases (specifically the shell form of
		# ENTRYPOINT). Thus we emit a warning.
		# https://docs.docker.com/v1.13/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact
		if not isjson:
			warn("Using ENTRYPOINT in the shell form is not a good idea. Orca can't emulate some of the Docker semantics at the moment. Consider switching to the JSON form.")

		# Decide whether we need to clear or change the entrypoint.
		if len(args) == 0:
			entrypoint_args = ["--clear=config.entrypoint"]
		else:
			if not isjson:
				args = self.default_shell + [" ".join(args)]
			entrypoint_args = ["--config.entrypoint="+arg for arg in args]
		self.umoci_config(*entrypoint_args)

	def _dispatch_cmd(self, *args, isjson=False):
		# Same logic as ENTRYPOINT.
		# https://docs.docker.com/v1.13/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact
		if not isjson:
			warn("Using CMD in the shell form is not a good idea. Orca can't emulate some of the Docker semantics at the moment. Consider switching to the JSON form.")

		# Decide whether we need to clear or change the cmd.
		if len(args) == 0:
			cmd_args = ["--clear=config.cmd"]
		else:
			if not isjson:
				args = self.default_shell + [" ".join(args)]
			cmd_args = ["--config.cmd="+arg for arg in args]
		self.umoci_config(*cmd_args)

	def _dispatch_label(self, *args, isjson=False):
		if isjson:
			raise DockerfileFormatError("LABEL doesn't support JSON arguments.")
		# Generate args.
		label_args = ["--config.label="+arg for arg in args]
		self.umoci_config(*label_args)

	def _dispatch_maintainer(self, *args, isjson=False):
		if isjson:
			raise DockerfileFormatError("MAINTAINER doesn't support JSON arguments.")
		# Generate args.
		author = " ".join(args)
		maintainer_args = ["--author="+author, "--config.label=maintainer="+author]
		self.umoci_config(*maintainer_args)

	def _dispatch_expose(self, *args, isjson=False):
		if isjson:
			raise DockerfileFormatError("EXPOSE doesn't support JSON arguments.")
		# Generate args.
		# NOTE: There's no way AFAIK of clearing exposedports from a Dockerfile.
		expose_args = ["--config.exposedports="+arg for arg in args]
		self.umoci_config(*expose_args)

	def _dispatch_copy(self, *args, isjson=False):
		if len(args) != 2:
			# TODO: This isn't true and needs to be extended.
			raise DockerfileFormatError("COPY can only have two arguments.")

		bundle_path = tempfile.mkdtemp(prefix="orca-bundle.")
		debug("Created new bundle for build: %s" % (bundle_path,))

		oci_source = "%s:%s" % (self.image_path, self.source_tag)
		oci_destination = "%s:%s" % (self.image_path, self.destination_tag)
		# TODO: Add --rootless support.
		os_system(self.umoci, "unpack", "--image="+oci_source, bundle_path)

		# Copy the source to the destination.
		# NOTE: This is probably unsafe because we don't have all of the safety
		#       of FollowSymlinkInScope.
		src = self.safepath(args[0])
		dst = os_path_clean(os_path_join(bundle_path, "rootfs", os_path_clean(args[1])))
		debug("recursive copy %s -> %s" % (src, dst))
		if os.path.isdir(dst):
			# This probably isn't correct.
			dst = os_path_join(dst, os.path.basename(src))
		if os.path.isdir(src):
			shutil.copytree(src, dst, symlinks=True)
		else:
			shutil.copy2(src, dst)

		# Repack the image.
		os_system(self.umoci, "repack", "--image="+oci_destination, bundle_path)

		# TODO: Delete the bundle.

		# The destination has become the ma^H^Hsource.
		self.source_tag = self.destination_tag

	def _dispatch_add(self, *args, isjson=False):
		warn("ADD implementation doesn't support {decompression,remote,chown} at the moment.")
		return self._dispatch_copy(self, *args, isjson=False)

	def _dispatch_volume(self, *args, isjson=False):
		# Generate args.
		# NOTE: There's no way AFAIK of clearing volumes from a Dockerfile.
		volume_args = ["--config.volume="+arg for arg in args]
		self.umoci_config(*volume_args)

	def _dispatch_user(self, *args, isjson=False):
		if len(args) != 1:
			raise DockerfileFormatError("USER can only have one argument.")
		if isjson:
			raise DockerfileFormatError("USER doesn't support JSON arguments.")

		# Generate args.
		user_args = ["--config.user="+args[0]]
		self.umoci_config(*user_args)

	def _dispatch_workdir(self, *args, isjson=False):
		if len(args) != 1:
			raise DockerfileFormatError("WORKDIR can only have one argument.")
		if isjson:
			raise DockerfileFormatError("WORKDIR doesn't support JSON arguments.")

		# Generate args.
		workdir_args = ["--config.workdir="+args[0]]
		self.umoci_config(*workdir_args)

	def _dispatch_env(self, *args, isjson=False):
		if isjson:
			raise DockerfileFormatError("ENV doesn't support JSON arguments.")
		# Generate args.
		# NOTE: There's no way AFAIK of clearing environment variables from a Dockerfile.
		env_args = ["--config.env="+arg for arg in args]
		self.umoci_config(*env_args)

	def _dispatch_arg(self, *args, isjson=False):
		if len(args) != 1:
			raise DockerfileFormatError("ARG can only have one argument.")
		if isjson:
			raise DockerfileFormatError("ARG doesn't support JSON arguments.")

		# ARG doesn't persist in the image.
		arg = args[0]
		if "=" not in arg:
			# It's not clear what Docker does here when --build-arg hasn't been
			# used either. It looks like they just ignore this case?
			return
		name, value = arg.split("=", maxsplit=1)
		if name not in self.build_args:
			self.build_args[name] = value

	def _dispatch_shell(self, *args, isjson=False):
		if not isjson:
			raise DockerfileFormatError("SHELL only supports JSON arguments.")
		self.default_shell = list(args)

	def _dispatch_stopsignal(self, *args, isjson=False):
		if len(args) != 1:
			raise DockerfileFormatError("STOPSIGNAL can only have one argument.")
		if isjson:
			raise DockerfileFormatError("STOPSIGNAL doesn't support JSON arguments.")
		warn("STOPSIGNAL is not yet implemented (requires newer OCI imagespec)")

	def _dispatch_onbuild(self, *args, isjson=False):
		warn("ONBUILD is not supported by OCI. Ignoring.")

	def _dispatch_healthcheck(self, *args, isjson=False):
		warn("HEALTHCHECK is not supported by OCI. Ignoring.")

	def build(self, clean=False, gc=False, tags=None, **_):
		for idx, step in enumerate(self.script):
			cmd = step.cmd.lower()
			args = step.args
			isjson = step.isjson

			info("BUILD[%d of %d]: %s %r [json=%r]" % (idx+1, len(self.script), cmd, args, isjson))

			# Dispatch to method.
			fn = "_dispatch_%s" % (cmd,)
			try:
				if hasattr(self, fn):
					# Do this before each step.
					self._generate_destination()
					getattr(self, fn)(*args, isjson=step.isjson)
				else:
					raise DockerfileFormatError("Unknown build command %s" % (cmd,))
			except DockerfileFormatError as e:
				fatal("Dockerfile format error: %s" % (e.args[0],))
			except SubprocessError as e:
				fatal("Error executing subprocess: %s" % (e.args[0],))

		info("BUILD: finished")

		# Create the output tag.
		if tags is not None:
			oci_source = "%s:%s" % (self.image_path, self.source_tag)
			for tag in tags:
				os_system(self.umoci, "tag", "--image="+oci_source, tag)
		else:
			tags = [self.source_tag]
			self.our_tags = [tag for tag in self.our_tags if tag != self.source_tag]

		info("BUILD: created tags %r" % (tags,))

		# Clean any unused tags.
		if clean:
			for tag in self.our_tags:
				oci_source = "%s:%s" % (self.image_path, tag)
				os_system(self.umoci, "rm", "--image="+oci_source)
			info("BUILD: cleaned intermediate tags")

		# Garbage collect.
		if gc:
			os_system(self.umoci, "gc", "--layout="+self.image_path)
			info("BUILD: garbage collected unused blobs")


def main(ctx, config):
	if not os.path.exists(ctx):
		fatal("Context %s doesn't exist." % (ctx,))

	builder = Builder(ctx, build_args=config.build_args)
	builder.build(clean=config.clean, gc=config.gc, tags=config.tags)

if __name__ == "__main__":
	def __wrapped_main__():
		class BuildArgsAction(argparse.Action):
			def __call__(self, parser, namespace, argument, option_string):
				if "=" not in argument:
					parser.error("--build-arg requires arguments of format NAME=value")

				name, value = argument.split("=", maxsplit=1)
				if getattr(namespace, self.dest, None) is None:
					setattr(namespace, self.dest, {})
				getattr(namespace, self.dest)[name] = value

		parser = argparse.ArgumentParser(description="Build an OCI image from a Dockerfile context. Rootless containers are also supported out-of-the-box.")
		# Orca commands.
		parser.add_argument("--clean", action="store_true", help="Remove all intermediate image tags after successful build.")
		parser.add_argument("--gc", action="store_true", help="Run a final garbage collection on output image.")
		parser.add_argument("--verbose", action="store_const", const=True, help="Output debugging information.")
		# Docker compat.
		parser.add_argument("--build-arg", metavar="NAME=value", dest="build_args", action=BuildArgsAction, help="Build-time arguments used in conjunction with ARG.")
		parser.add_argument("-t", "--tag", dest="tags", action="append", default=None, help="Tag(s) of the output image (by default, randomly generated).")
		parser.add_argument("ctx", nargs=1, help="Build context which is used when referencing host files. Files outside the build context cannot be accessed by the build script.")

		config = parser.parse_args()
		ctx = config.ctx[0]

		level = logging.INFO
		if config.verbose:
			level = logging.DEBUG
		logging.basicConfig(format="orca-build[%(levelname)s] %(message)s", level=level)
		main(ctx, config)

	__wrapped_main__()
